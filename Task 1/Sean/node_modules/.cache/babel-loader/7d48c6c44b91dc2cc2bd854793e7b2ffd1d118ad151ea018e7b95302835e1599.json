{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\65911\\\\nexusTasks\\\\Task 1\\\\Sean\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // declare updateable variable representing new task that user wants to add, newTask, using hook function\n  const [newTask, setNewTask] = useState(\"\");\n  // declare updateable variabe representing the new key generated for the new task that the user input, newKey, using hook function\n  const [newKey, setNewKey] = useState(0);\n  // declare updateable array as a list of all the tasks that the user has completed\n  const [completedList, setCompletedList] = useState([]);\n  // declare updateable array as a list of all the tasks that the user wants to complete, listOfTasks, using hook function\n  const [newList, setNewList] = useState([]);\n\n  // add value of user input to the array of tasks and clear the input field\n  function addTask() {\n    setNewKey(newKey + 1);\n    const task = {\n      id: newKey,\n      value: newTask\n    };\n    setNewList(oldList => [...oldList, task]);\n    setNewTask(\"\");\n    console.log(newList);\n  }\n\n  // declaring a function to shift completed task from pending tasks list to completed tasks list\n  const handleCompleted = taskCompleted => {\n    const updatedList = newList.filter(task => task.value !== taskCompleted.value);\n    setNewList(updatedList);\n    setCompletedList(oldList => [...oldList, taskCompleted]);\n  };\n\n  // declaring a function to delete task of users choosing\n  const handleDelete = taskToDelete => {\n    const updatedList = newList.filter(task => task.value !== taskToDelete);\n    setNewList(updatedList);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"To-do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Add a task...\",\n      value: newTask,\n      onChange: e => setNewTask(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addTask(),\n      children: \"Add task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n          padding: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Pending Tasks:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), newList.length === 0 ? \"You have no pending tasks.\" : /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: newList.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [task.value, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleCompleted(task),\n              children: \"Completed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDelete(task.value),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }, this)]\n          }, task.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n          padding: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Completed Tasks:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: completedList.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: task.value\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"r+M/Ojm8gD0F4ZyojLhBm1K+5pE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","newTask","setNewTask","newKey","setNewKey","completedList","setCompletedList","newList","setNewList","addTask","task","id","value","oldList","console","log","handleCompleted","taskCompleted","updatedList","filter","handleDelete","taskToDelete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","onClick","style","display","flexDirection","justifyContent","padding","length","map","_c","$RefreshReg$"],"sources":["C:/Users/65911/nexusTasks/Task 1/Sean/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction App() {\r\n  // declare updateable variable representing new task that user wants to add, newTask, using hook function\r\n  const [newTask, setNewTask] = useState(\"\");\r\n  // declare updateable variabe representing the new key generated for the new task that the user input, newKey, using hook function\r\n  const [newKey, setNewKey] = useState(0);\r\n  // declare updateable array as a list of all the tasks that the user has completed\r\n  const [completedList, setCompletedList] = useState([]);\r\n  // declare updateable array as a list of all the tasks that the user wants to complete, listOfTasks, using hook function\r\n  const [newList, setNewList] = useState([]);\r\n\r\n  // add value of user input to the array of tasks and clear the input field\r\n  function addTask() {\r\n    setNewKey(newKey + 1);\r\n    const task = {\r\n      id: newKey,\r\n      value: newTask,\r\n    };\r\n    setNewList((oldList) => [...oldList, task]);\r\n    setNewTask(\"\");\r\n    console.log(newList);\r\n  }\r\n\r\n  // declaring a function to shift completed task from pending tasks list to completed tasks list\r\n  const handleCompleted = (taskCompleted) => {\r\n    const updatedList = newList.filter(\r\n      (task) => task.value !== taskCompleted.value\r\n    );\r\n    setNewList(updatedList);\r\n    setCompletedList((oldList) => [...oldList, taskCompleted]);\r\n  };\r\n\r\n  // declaring a function to delete task of users choosing\r\n  const handleDelete = (taskToDelete) => {\r\n    const updatedList = newList.filter((task) => task.value !== taskToDelete);\r\n    setNewList(updatedList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Create a header file */}\r\n      <h1>To-do List</h1>\r\n      <br></br>\r\n      {/* Create an input field for user to type new newList. Update the newTask variable based on the value in the input field */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Add a task...\"\r\n        value={newTask}\r\n        onChange={(e) => setNewTask(e.target.value)}\r\n      />\r\n      <button onClick={() => addTask()}>Add task</button>\r\n      <br></br>\r\n      <br></br>\r\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            padding: 10,\r\n          }}\r\n        >\r\n          <h3>Pending Tasks:</h3>\r\n          {/* Display list of tasks with a remove button*/}\r\n          {newList.length === 0 ? (\r\n            \"You have no pending tasks.\"\r\n          ) : (\r\n            <ul>\r\n              {newList.map((task) => (\r\n                <li key={task.id}>\r\n                  {task.value}\r\n                  <button onClick={() => handleCompleted(task)}>\r\n                    Completed\r\n                  </button>\r\n                  <button onClick={() => handleDelete(task.value)}>\r\n                    Remove\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            padding: 10,\r\n          }}\r\n        >\r\n          <h3>Completed Tasks:</h3>\r\n          {/* Display list of tasks that are completed */}\r\n          <ul>\r\n            {completedList.map((task) => (\r\n              <li key={task.id}>{task.value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}